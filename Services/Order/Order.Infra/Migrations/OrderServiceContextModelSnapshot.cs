// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Order.Infra.ServiceContext;

#nullable disable

namespace Order.Infra.Migrations
{
    [DbContext(typeof(OrderServiceContext))]
    partial class OrderServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Order.Domain.Model.Address", b =>
                {
                    b.Property<string>("orderId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Thành phố/Tỉnh");

                    b.Property<string>("commune")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Xã/Phường");

                    b.Property<string>("detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Địa chỉ");

                    b.Property<string>("district")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Quận/Huyện");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Đường");

                    b.HasKey("orderId");

                    b.ToTable("Địa chỉ", (string)null);
                });

            modelBuilder.Entity("Order.Domain.Model.OrderAggregate", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Thời gian tạo");

                    b.Property<string>("orderName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Tên đơn hàng");

                    b.Property<int?>("orderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Mã trạng thái");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal")
                        .HasColumnName("Giá");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Mã người đặt");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Tên Người Đặt hàng");

                    b.HasKey("Id");

                    b.HasIndex("orderStatusId");

                    b.ToTable("Đơn hàng", (string)null);
                });

            modelBuilder.Entity("Order.Domain.Model.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("count")
                        .HasColumnType("int")
                        .HasColumnName("Số lượng");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Ảnh");

                    b.Property<string>("orderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Mã đơn hàng");

                    b.Property<decimal>("price")
                        .HasColumnType("DECIMAL")
                        .HasColumnName("Giá");

                    b.Property<string>("productId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Mã sản phẩm");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Tên sản phẩm");

                    b.HasKey("Id");

                    b.HasIndex("orderId");

                    b.ToTable("Sản phẩm đơn hàng", (string)null);
                });

            modelBuilder.Entity("Order.Domain.Model.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Trạng thái Đơn hàng");

                    b.Property<string>("sub_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Thông tin đơn hàng");

                    b.HasKey("Id");

                    b.ToTable("Trạng thái đơn hàng", (string)null);
                });

            modelBuilder.Entity("Order.Domain.Model.Address", b =>
                {
                    b.HasOne("Order.Domain.Model.OrderAggregate", "order")
                        .WithOne("address")
                        .HasForeignKey("Order.Domain.Model.Address", "orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("Order.Domain.Model.OrderAggregate", b =>
                {
                    b.HasOne("Order.Domain.Model.OrderStatus", "orderStatus")
                        .WithMany("orders")
                        .HasForeignKey("orderStatusId");

                    b.Navigation("orderStatus");
                });

            modelBuilder.Entity("Order.Domain.Model.OrderItem", b =>
                {
                    b.HasOne("Order.Domain.Model.OrderAggregate", "order")
                        .WithMany("orderItems")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("Order.Domain.Model.OrderAggregate", b =>
                {
                    b.Navigation("address");

                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Order.Domain.Model.OrderStatus", b =>
                {
                    b.Navigation("orders");
                });
#pragma warning restore 612, 618
        }
    }
}
